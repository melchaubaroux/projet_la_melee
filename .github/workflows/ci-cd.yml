name: CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest  # L'environnement d'exécution

    steps:
    # Étape 1 : Vérifier le code source
    - name: Checkout code
      uses: actions/checkout@v4



    # Étape 2 : installation des dependances 
    - name: install testing dependancies
      run: |
          pip install pytest pytest-testmon

     name: Install dependencies for service 1
      run: |
        pip install -r ApiDb/requirements.txt

    - name: Install dependencies for service 2
      run: |
        pip install -r ApiWhisper/requirements.txt

    - name: Install dependencies for service 3
      run: |
        pip install -r ApiChatbot/requirements.txt
   

    # Étape 3 : Exécuter les tests
    - name: Run tests
      run:  pytest --testmon 
      

# jobs:
#   detect-changes:
#     runs-on: ubuntu-latest
#     outputs:
#       changed_files: ${{ steps.changed_files.outputs.files }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
      
#       - name: Detect changed files
#         id: changed_files
#         run: |
#           files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
#           echo "::set-output name=files::$files"

#   run-tests:
#     needs: detect-changes
#     if: ${{ steps.changed_files.outputs.files }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Run tests
#         run: |
#           pytest --testmon
#           # Exécuter des tests uniquement pour les fichiers/services modifiés
#           echo "Running tests for changed services"
#           # Implémentation spécifique selon vos tests

#   build-docker-images:
#     needs: detect-changes
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Login to DockerHub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.USERNAME }}
#           password: ${{ secrets.PASSWORD }}

#       - name: Build and push Docker images
#         run: |
#           for service in $(echo "${{ steps.changed_files.outputs.files }}" | grep "Dockerfile" | cut -d '/' -f1 | uniq); do
#             docker build -t myrepo/$service:latest $service
#             docker push myrepo/$service:latest
#           done

#   deploy-stack:
#     needs: build-docker-images
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Deploy to Docker Swarm
#         run: |
#           docker stack deploy -c docker-compose.yml mystack
